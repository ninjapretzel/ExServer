// Map data.
// Objects of this kind may be generated by a generator for a procedural map. 
{
	// Display name and used to teleport to map.
	name: "Avalon",
	// Was this map generated by a procedural function?
	// (If not present, inferred as false.)
	procedural: false,
	
	// Physical space simulation information ...
	// Size of a single cell
	cellSize: 10,
	// Radius of cells visible to clients 
	cellDist: 2,
	
	// Toggles between square cells and cubical cells
	// maps in "3d" games might still prefer 2d cells 
	// if most of the gameplay is actually only 2d (no verticality)
	// For example, if there is a map with a wide terrain. 
	is3d: false,
	// axes are for what axes are entities allowed to move over for non-2d maps.
	axes: "xz",
	// Bounds where entities are allowed.
	// y is ignored in 2d mode. (server reads/writes vector-like primitives to database as an array)
	bounds: [ 
		0, 40, 0,
		1000, 40, 0,
	],
	
	// sparse maps update objects only around players, 
	// and destroy cells when they are not visible to players.
	// This also means any entities that are in such cells get poofed.
	// Procedural maps should be sparse.
	sparse: false,
	// Solo maps do not show other client's entities to any connected players.
	// They may show other entities belonging to the client.
	solo: false,
	
	// Information about skybox to use 
	skybox: {
		// Name of material to find under a /Resources/ folder
		material: "EternusBase",
		
		// Include the following for procedural skyboxes.
		// One generator for skybox, instead of multiple. 
		// What generator spec to use 
		generator: "basic",
		// Seed to use
		seed: 56,
	},
	
	// Information about terrain, if present. 
	// This information is shared between client and server to generate terrain samples.
	// All information must be here to configure 
	terrain: {
		// Physical size of a terrain tile.
		tileSize: [ 100, 100, 100 ],
		// Maximum radius of terrain tiles that a client may simulate.
		repeating: 14,
		// Samples of heightmap for a single terrain tile 
		meshSegments: 64, 
		// Samples of splatmap for a single terrain tile 
		splatSegments: 64,
		// Angle of terrain from 'flat' normal to be considered a cliff.
		slopeAngle: 60,
		// Generator name. Used on client to look up a ComputeShader resource
		generator: "Craters",
		// Used to provide seed value for all kernels
		seed: 15,
		// Name of heightmap kernel. Defaults to "Heightmap" if not provided. 
		heightmapKernelName: "Heightmap",
		// Name of splatmap kernel. Defaults to "Splatmap" if not provided. 
		splatmapKernelName: "Splatmap",
		// Used for splatting textures on terrain client-side.
		// Server can pick these. At least two must be provided.
		// First element is used as cliffs, and all of the others are painted on.
		terrainLayers: [ 
			"FoothillsOfAriloa384",
			"DeepCaves142",
			"SlumberingVolcaino178",
			"FaultZone180",
			"LunarTarget438",
		],
		noises: [],
		ubers: [
			{
				octaves: 4,
				perturb: .27,
				sharpness: .034,
				amplify: .208,
				altitudeErosion: .2122,
				ridgeErosion: .586,
				slopeErosion: .402,
				lacunarity: 2.0,
				gain: .5,
				startAmplitude: .3,
				scale: .002,
			},
			{
				octaves: 4,
				perturb: .27,
				sharpness: .034,
				amplify: .208,
				altitudeErosion: .2122,
				ridgeErosion: .586,
				slopeErosion: .402,
				lacunarity: 2.0,
				gain: .5,
				startAmplitude: .3,
				scale: .002,
			}
		]
		
	},
	
	// Information about local objects to create 
	// These objects do not show up on the server, only client side. 
	// Some of these objects may be solid on the client, 
	// if that is the case the server cannot verify collisions with them. 
	background: {
		// Fixed individual objects in background
		objects: [],
		
		// Include the following for procedural background objects:
		generators: [ { } ],
		// generators: [ {
			// What generator spec to use
			//generator: "bgs",
			// Seed to use
			//seed: 56,
			// ... TBD: decide other parameters ...
		//} ],
	},
	
	// Information about entities on the map.
	// These objects are placed both on the server and client.
	entities: {
		// Fixed entities in the map 
		objects: [ ],
		
		// Include the following for procedural entities:
		generators: [ { } ],
		// generators: [ { 
		//	generator: "Asteroids",
		//	seed: 13122,
		//	density: 12
		//}, { 
		//	generator: "FlyingBugs",
		//	seed: 1337,
		//	density: 1,
		//}, ],
		
	},
	
	
}